% Note:
% This code is the main GUI that is first run in order to do image
% processing. This is based primarily off of
% image_processing_common_matter. This is roughly the GUI version of that
% code.
%
function varargout = ImgTestGui(varargin)

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @ImgTestGui_OpeningFcn, ...
                   'gui_OutputFcn',  @ImgTestGui_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end % End initialization code - DO NOT EDIT

% --- Executes just before ImgTestGui is made visible.
function ImgTestGui_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% UIWAIT makes ImgTestGui wait for user response (see UIRESUME)
% uiwait(handles.figureImgTestGui);

% Choose default command line output for ImgTestGui
handles.output = hObject;
set(gcf, 'color', [1,1,1]);
%set inital values for various variables used throughout this code. These
%values can be changed in the options menu. See options();
setappdata(0,'remote',1); 
setappdata(0,'skip_background_verification',0);
setappdata(0,'linearize',0);
setappdata(0,'show_image',1);
setappdata(0,'DC_offset',1);
setappdata(0,'save_video',1);
setappdata(0,'save_data',1);
setappdata(0,'save_override',0);
setappdata(0,'show_noise_sample',1);
setappdata(0,'remove_xrays',1);
setappdata(0,'show_DC_sample',0);
setappdata(0,'manual_energy',1);
setappdata(0,'log_color',0);
setappdata(0,'manual_set_figure_position',1);
setappdata(0,'background_checked',0);
setappdata(0,'scale_adjustment',0.95);
setappdata(0,'curr_lim',[0 5000]);
setappdata(0,'curr_lim1', 0);
setappdata(0,'curr_lim2', 5000);

%set these variables in workspace
remote = getappdata(0, 'remote');
assignin('base', 'remote', remote);
skip_background_verification = getappdata(0, 'skip_background_verification');
assignin('base', 'skip_background_verification', skip_background_verification);
linearize = getappdata(0, 'linearize');
assignin('base', 'linearize', linearize);
show_image = getappdata(0, 'show_image');
assignin('base', 'show_image', show_image);
DC_offset = getappdata(0, 'DC_offset');
assignin('base', 'DC_offset', DC_offset);
save_video = getappdata(0, 'save_video');
assignin('base', 'save_video', save_video);
save_data = getappdata(0, 'save_data');
assignin('base', 'save_data', save_data);
save_override = getappdata(0, 'save_override');
assignin('base', 'save_override', save_override);
show_noise_sample = getappdata(0, 'show_noise_sample');
assignin('base', 'show_noise_sample', show_noise_sample);
remove_xrays = getappdata(0, 'remove_xrays');
assignin('base', 'remove_xrays', remove_xrays);
show_DC_sample = getappdata(0, 'show_DC_sample');
assignin('base', 'show_DC_sample', show_DC_sample);
manual_energy = getappdata(0, 'manual_energy');
assignin('base', 'manual_energy', manual_energy);
log_color = getappdata(0, 'log_color');
assignin('base', 'log_color', log_color);
manual_set_figure_position = getappdata(0, 'manual_set_figure_position');
assignin('base', 'manual_set_figure_position', manual_set_figure_position);
background_checked = getappdata(0, 'background_checked');
assignin('base', 'background_checked', background_checked);
scale_adjustment = getappdata(0, 'scale_adjustment');
assignin('base', 'scale_adjustment', scale_adjustment);
curr_lim = getappdata(0, 'curr_lim');
assignin('base', 'curr_lim', curr_lim);

%have initial inputs in the textboxes where user would input for dataset
%loading
handles.editSourceDir.String = 'E:/FACET_data/2014/';
 handles.editServerStr.String = 'nas/nas-li20-pm00/';
 handles.editExptStr.String = 'E217';
 handles.editDate.String = '20140601';
 handles.editDataSet.String = '13116';
% % set these initial inputs for loading a dataset
 setappdata(0,'source_dir', handles.editSourceDir.String);
 setappdata(0,'server_str', handles.editServerStr.String);
 setappdata(0,'expt_str', handles.editExptStr.String);
 setappdata(0,'date_str', handles.editDate.String );
 setappdata(0,'dataset_str', handles.editDataSet.String);
%assign these initial inputs for loading a dataset in workspace
 assignin('base', 'source_dir', handles.editSourceDir.String);
 assignin('base', 'server_str', handles.editServerStr.String);
 assignin('base', 'expt_str', handles.editExptStr.String);
 assignin('base', 'date_str', handles.editDate.String);
 assignin('base', 'dataset_str', handles.editDataSet.String);

set(handles.figureImgTestGui,'Resize','on');
set(handles.figureImgTestGui,'Position',[30 19.2308 150.8 45]);

% Update handles structure
guidata(hObject, handles);

% --- Outputs from this function are returned to the command line.
function varargout = ImgTestGui_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;

% --- Executes when user attempts to close figureImgTestGui.
function figureImgTestGui_CloseRequestFcn(hObject, eventdata, handles)
% Since I have set so many variables in the root directory using
% setappdata/getappdata I need to eventually remove all of the data. Can be
% fixed by setting the variables using setappdata(figureImgTestGui...)
% which automatically deletes variables when the program closes. 

%rmappdata(0, 'draw_ROI');
% rmappdata(0,'remote');
% rmappdata(0,'skip_background_verification');
% rmappdata(0,'linearize');
% rmappdata(0,'show_image');
% rmappdata(0,'DC_offset');
% rmappdata(0,'save_video');
% rmappdata(0,'save_data');
% rmappdata(0,'save_override');
% rmappdata(0,'show_noise_sample');
% rmappdata(0,'remove_xrays');
% rmappdata(0,'show_DC_sample');
% rmappdata(0,'manual_energy');
% rmappdata(0,'log_color');
% rmappdata(0,'manual_set_figure_position');
% rmappdata(0,'source_dir');
% rmappdata(0,'server_str');
% rmappdata(0,'expt_str');
% rmappdata(0,'date_str');
% rmappdata(0,'dataset_str');
% rmappdata(0,'camera');
% rmappdata(0, 'data');
% rmappdata(0,'background_checked');
% rmappdata(0, 'scale_adjustment');
delete(hObject); %closes figure

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% These functions just create the different GUI components
%==========================================================================
%===========================Create Function================================
%==========================================================================

% --- Executes during object creation, after setting all properties.
function sliderImageView_CreateFcn(hObject, eventdata, handles)
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end

% --- Executes during object creation, after setting all properties.
function editDate_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function editSourceDir_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function editDataSet_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function editExptStr_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function editServerStr_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function editOfStack_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function editGoToShot_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --------------------------------------------------------------------
function menuFile_Callback(hObject, eventdata, handles)
% --------------------------------------------------------------------
function menuSave_Callback(hObject, eventdata, handles)
% --------------------------------------------------------------------
function menuOperations_Callback(hObject, eventdata, handles)
% --------------------------------------------------------------------
function menuLineout_Callback(hObject, eventdata, handles)
% --------------------------------------------------------------------
function menuSettings_Callback(hObject, eventdata, handles)
% --------------------------------------------------------------------
function menuView_Callback(hObject, eventdata, handles)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%==========================================================================
%========================Callbacks=========================================
%==========================================================================

%gets the source directory from user
function editSourceDir_Callback(hObject, eventdata, handles) 
source_dir = get(handles.editSourceDir, 'String');
setappdata(0,'source_dir', source_dir);
assignin('base', 'source_dir', source_dir);
guidata(hObject, handles);

%gets server location from user
function editServerStr_Callback(hObject, eventdata, handles)
server_str = get(handles.editServerStr, 'String');
setappdata(0,'server_str', server_str);
assignin('base', 'server_str', server_str);
guidata(hObject, handles);

%gets the experiment number from user
function editExptStr_Callback(hObject, eventdata, handles)
expt_str = get(handles.editExptStr, 'String');
setappdata(0,'expt_str', expt_str);
assignin('base', 'expt_str', expt_str);
guidata(hObject, handles);

%gets the date of the dataset from user
function editDate_Callback(hObject, eventdata, handles)
date_str = get(handles.editDate, 'String');
setappdata(0,'date_str', date_str);
assignin('base', 'date_str', date_str);
guidata(hObject, handles);

%gets the the dataset number from user
function editDataSet_Callback(hObject, eventdata, handles)
dataset_str = get(handles.editDataSet, 'String');
setappdata(0,'dataset_str', dataset_str);
assignin('base', 'dataset_str', dataset_str);
%sets output directory 
outputdir=['R:/Lab Work/FACET Analysis/' dataset_str '/'];
setappdata(0,'outputdir', outputdir);
assignin('base', 'outputdir', outputdir);
guidata(hObject, handles);

% --- Executes on button press in pushLoadDataSet.
function pushLoadDataSet_Callback(hObject, eventdata, handles)
%loads data set 
m1 = msgbox('Loading Camera Names. Will close after data is loaded. Please Wait', 'Load Data');

%get parts of path inputted by user from textboxes
source_dir = getappdata(0, 'source_dir');
server_str = getappdata(0, 'server_str');
expt_str = getappdata(0, 'expt_str');
date_str = getappdata(0, 'date_str');
dataset_str = getappdata(0, 'dataset_str');

%Creates the path to dataset from user input
data_path=[source_dir server_str expt_str '/' date_str(1:4) '/' date_str '/' ...
       expt_str '_' dataset_str '/' expt_str '_' dataset_str '.mat'];
setappdata(0, 'data_path', data_path);

% load data
data=E200_load_data(data_path,expt_str);
setappdata(0, 'data', data);
setappdata(0,'dataorig',data);
% 

cameraNames();

close(m1);

% --------------------------------------------------------------------
function menuWaterfall_Callback(hObject, eventdata, handles)
%this funciton created a waterfall plot from sorted lineouts based on a
%specified parameter. Always creates a fresh set of lineouts before making
%a new plot
saveLineouts;
sort_selected_snapshot_by_var_edited;

% --------------------------------------------------------------------
function menuOptions_Callback(hObject, eventdata, handles)
% This functions opens the options menu where variables that are not
% changed often are put
% These set the checks in the checkboxes based on if the variables are 1 or
% 0 and put current values for variables 
optionsHandles = guihandles(options);
optionsHandles.checkRemote.Value = getappdata(0,'remote');
optionsHandles.checkSkipBackground.Value = getappdata(0,'skip_background_verification');
optionsHandles.checkLinearize.Value = getappdata(0,'linearize');
optionsHandles.checkShowImage.Value = getappdata(0,'show_image');
optionsHandles.checkDCOffset.Value = getappdata(0,'DC_offset');
optionsHandles.checkSaveVideo.Value = getappdata(0,'save_video');
optionsHandles.checkSaveData.Value = getappdata(0,'save_data');
optionsHandles.checkSaveOverride.Value = getappdata(0,'save_override');
optionsHandles.checkShowNoiseSample.Value = getappdata(0,'show_noise_sample');
optionsHandles.checkRemoveXRays.Value = getappdata(0,'remove_xrays');
optionsHandles.checkShowDCSample.Value = getappdata(0,'show_DC_sample');
optionsHandles.checkManualEnergy.Value = getappdata(0,'manual_energy');
optionsHandles.checkLogColor.Value = getappdata(0,'log_color');
optionsHandles.checkManualSetFigure.Value = getappdata(0,'manual_set_figure_position');
optionsHandles.checkBackgroundCheck.Value = getappdata(0,'background_checked');
optionsHandles.editScaleAdjustment.String = getappdata(0,'scale_adjustment');
optionsHandles.editCurrentLimit1.String = getappdata(0,'curr_lim1');
optionsHandles.editCurrentLimit2.String = getappdata(0,'curr_lim2');

options();
guidata(hObject, handles);

% --------------------------------------------------------------------
function menuLoadNewCamera_Callback(hObject, eventdata, handles)
%This should be selected if you want to load a new camera from a data set 
%that is already loaded
cameraNames();

% --- Executes on button press in pushPreviousShot.
function pushPreviousShot_Callback(hObject, eventdata, handles)
%gets necessary variables
camera = getappdata(0, 'camera');
num_stacks = getappdata(0,'num_stacks');
num_images = getappdata(0,'num_images');
stack_text = getappdata(0,'stack_text');
bend_struc = getappdata(0,'bend_struc');

i = getappdata(0,'i');
j = getappdata(0, 'j');

if (i == num_stacks && j == num_images) 
    set(handles.pushNextShot,'visible','on');
end 

if (j == num_images+1) %when the shot number is at the end of a stack, move to next stack
    if camera.energy_camera 
        if exist('variable_bend','var')
            camera.dipole_bend=bend_struc.dipole_multiplier_values(i);
            zero_Gev_px=bend_struc.zero_Gev_px_vector(i);                        
        end
        if camera.dipole_bend~=1
            stack_text{i}=['Dipole=' num2str(camera.dipole_bend,2) ', ' stack_text{i}];
        end
    end
    if (i ~= 1)
    setappdata(0, 'i', i-1);
    end
end


if (j ~= 1)
        setappdata(0, 'j', j-1);
        
        i= getappdata(0,'i');   
        j= getappdata(0,'j');
     
        ImgTestGui_ShowImage;
        

end

% --- Executes on button press in pushNextShot.
function pushNextShot_Callback(~, eventdata, handles)

% assumes that there will always be a previous shot if next shot is pressed
set(handles.pushPreviousShot, 'Visible', 'on'); 

%gets necessary variables
camera = getappdata(0, 'camera');
num_stacks = getappdata(0,'num_stacks');
num_images = getappdata(0,'num_images');
stack_text = getappdata(0,'stack_text');
bend_struc = getappdata(0,'bend_struc');


i = getappdata(0,'i');
j = getappdata(0, 'j');

if (j == num_images || (j == 1 && i == 1)) 
% if going to a new stack change camera structure if using energy camera  
% also acounts for the first stack
    if camera.energy_camera 
        if exist('variable_bend','var')
            camera.dipole_bend=bend_struc.dipole_multiplier_values(i);
            zero_Gev_px=bend_struc.zero_Gev_px_vector(i);                        
        end
        if camera.dipole_bend~=1
            stack_text{i}=['Dipole=' num2str(camera.dipole_bend,2) ', ' stack_text{i}];
        end
    end
    % when the shot number is at the end of a stack, move to next stack if
    % there is one
    if (i ~= num_stacks + 1 && j == num_images)
    setappdata(0, 'i', i+1);
       i =  getappdata(0, 'i');
    end
end


if (i ~= num_stacks + 1)
        setappdata(0, 'j', j+1);
        
        i = getappdata(0,'i');
        
    %go through images in each scan step
    
         j = getappdata(0,'j');
         ImgTestGui_ShowImage;
       
end


if (j == num_images && i == num_stacks+1)%removes button to prevent user from clicking onward
    set(handles.pushNextShot,'visible','off')
else
    set(handles.pushNextShot,'visible','on');
end

%Implement viewing options here
% --------------------------------------------------------------------
function menuViewAll_Callback(hObject, eventdata, handles)
% This function takes the stack number inputted by the user, the shot
% number taken from editGoToShot and displays the specified image
num_img_shown = inputdlg('How many images would you like to show at once?')
num_img_shown = str2num(num_img_shown{1});
camera = getappdata(0, 'camera');
num_stacks = getappdata(0,'num_stacks');
num_images = getappdata(0,'num_images');
stack_text = getappdata(0,'stack_text');
bend_struc = getappdata(0,'bend_struc');
%data = getappdata(0, 'data');
sebas_colors=sebasColorTable();
subplot_columns=5;

i = 1;
j = 1;
counter = 1;
if (j == num_images || (j == 1 && i == 1)) 
% if going to a new stack change camera structure if using energy camera  
% also acounts for the first stack
    if camera.energy_camera 
        if exist('variable_bend','var')
            camera.dipole_bend=bend_struc.dipole_multiplier_values(i);
            zero_Gev_px=bend_struc.zero_Gev_px_vector(i);                        
        end
        if camera.dipole_bend~=1
            stack_text{i}=['Dipole=' num2str(camera.dipole_bend,2) ', ' stack_text{i}];
            setappdata(0, 'stack_text', stack_text);
        end
    end
    
end
%sort shots option
%sorts by taking the index values from sorting by a parameter (assumes
%sort_selected_snapshot_by_var_edited is run beforehand)
sort_q = questdlg('Would you like to see shots sorted');

switch sort_q
    case 'Yes'
        for counter=1:num_img_shown 
            index_sorted_UID = getappdata(0,'index_sorted_UID');
            j = index_sorted_UID(counter);
        curr_image= j;
        setappdata(0, 'curr_image', curr_image);
        load_noiseless_images_15_edited;
        
        this_image = getappdata(0, 'this_image');
        %%%%%%%%%%%%%%%%%
        %show the image 
        %         if show_image && mod(j,2)==1 %Fix For odd(1) or even(0)
        if counter ==1 
            main_canvas=figure(40);
            subplot_rows=ceil(num_img_shown/subplot_columns);

            set(main_canvas,'position',[100 350 500 500])
            set(main_canvas, 'color', [1 1 1]);
            set(main_canvas, 'Name', 'Sorted by ' 
            movegui(40);
%             set(gca,'position',[0.02 0.02 0.96 0.96])
        end
           
        subplot(subplot_rows,subplot_columns,counter)
        %make the original image if diagnostic is on, otherwise work
        %only with linearized (or otherwise processed?) image
        if camera.energy_camera
            imagesc(this_image)
            energy_pixel= getappdata(0, 'energy_pixel');
            energy_ticks = getappdata(0, 'energy_ticks');
            set(gca,'YTick',energy_pixel);
            set(gca,'YTickLabel',energy_ticks);            
        else
            imagesc(this_image)
        end        
        colormap(sebas_colors)
        set(gca,'clim',[120 1000])
%         ylabel(y_label_text,'fontsize',15); 
%         xlabel('pixels','fontsize',15);
          
          disp(num2str(j));
        end
    
    otherwise
        for j=1:num_img_shown        
        curr_image= j;
        setappdata(0, 'curr_image', curr_image);
        load_noiseless_images_15_edited;
        
        this_image = getappdata(0, 'this_image');
        %%%%%%%%%%%%%%%%%
        %show the image 
        %         if show_image && mod(j,2)==1 %Fix For odd(1) or even(0)
        if counter ==1 
            main_canvas=figure(40);
            subplot_rows=ceil(num_img_shown/subplot_columns);

            set(main_canvas,'position',[100 350 500 500])
            movegui(40);
%             set(gca,'position',[0.02 0.02 0.96 0.96])
        end
           
        subplot(subplot_rows,subplot_columns,j)
        %make the original image if diagnostic is on, otherwise work
        %only with linearized (or otherwise processed?) image
        if camera.energy_camera
            imagesc(this_image)
            energy_pixel= getappdata(0, 'energy_pixel');
            energy_ticks = getappdata(0, 'energy_ticks');
            set(gca,'YTick',energy_pixel);
            set(gca,'YTickLabel',energy_ticks);            
        else
            imagesc(this_image)
        end        
        colormap(sebas_colors)
        set(gca,'clim',[120 1000])
%         ylabel(y_label_text,'fontsize',15); 
%         xlabel('pixels','fontsize',15);
          counter=counter+1; 
          disp(num2str(j));
        end
    
end
        
% --------------------------------------------------------------------
function editGoToShot_Callback(hObject, eventdata, handles)
% gets the text inputted in the textbox for the shot number. See
% editOfStack where this input is used
j = str2double(get(hObject,'String'));
setappdata(0, 'j', j);

% --------------------------------------------------------------------
function editOfStack_Callback(hObject, eventdata, handles)
% This function takes the stack number inputted by the user, the shot
% number taken from editGoToShot and displays the specified image

camera = getappdata(0, 'camera');
num_stacks = getappdata(0,'num_stacks');
num_images = getappdata(0,'num_images');
stack_text = getappdata(0,'stack_text');
bend_struc = getappdata(0,'bend_struc');

i = str2double(get(hObject,'String'));% get the stack number from user

setappdata(0, 'i', i);
j = getappdata(0, 'j'); % this would be the shot number specified in editGoToShot
i = getappdata(0, 'i');

% if user specified the first shot of first stack, previous shot button disappears
if (j == 1 && i ==1) 
   set(handles.pushPreviousShot, 'Visible', 'off');
else 
   set(handles.pushPreviousShot, 'Visible', 'on');
end

if (j == num_images || j == 1) 
% if going to a new stack change camera structure if using energy camera  
% also acounts for the first stack
    if camera.energy_camera 
        if exist('variable_bend','var')
            camera.dipole_bend=bend_struc.dipole_multiplier_values(i);
            zero_Gev_px=bend_struc.zero_Gev_px_vector(i);                        
        end
        if camera.dipole_bend~=1
            stack_text{i}=['Dipole=' num2str(camera.dipole_bend,2) ', ' stack_text{i}];
            setappdata(0, 'stack_text', stack_text);
        end
    end
end

% + 1 accounts for displaying the last stack of images if at the last stack
if (i ~= num_stacks + 1) 
        setappdata(0, 'j', j);
        j = getappdata(0, 'j');
    
        ImgTestGui_ShowImage;
        
end

if (j == num_images && i == num_stacks)%removes button to prevent user from clicking onward
    set(handles.pushNextShot,'visible','off');
else
    set(handles.pushNextShot,'visible','on');
end

% --------------------------------------------------------------------
function menuSaveLineouts_Callback(hObject, eventdata, handles)
%Creates lineouts for each shot and saves them in data structure
dataset_str = getappdata(0, 'dataset_str');
outputdir=['E:/Sorting Output Directory/' dataset_str '/'];
%outputdir=['/Users/Navid/Library/Mobile Documents/com~apple~CloudDocs/Lab Work/' date_str(1:4) ' FACET Analysis/'];
%for confirmation of outputdir but not needed when only saving lineouts in
%data structure
% q1  = questdlg(['The output directory is ' outputdir '  Would you like to change it?']);
% switch q1
%     case 'Yes'
%         q1 = uigetdir;
%         setappdata(0, 'outputdir', q1)
%         saveLineouts;
%     case 'No'
%         saveLineouts;
%     otherwise   
%         msgbox('Please confirm the output directory where data wil be saved');
% end
setappdata(0, 'outputdir', outputdir);
saveLineouts;
% --------------------------------------------------------------------
function menuViewLineouts_Callback(hObject, eventdata, handles)
% prompt user for starting line and ending line of region of interest for lineout

    name = 'Range of Lineout'; 
    a = inputdlg('Enter start of lineout:', name);
    box_region_start = a{1};
    b = inputdlg('Enter end of lineout:', name);
    box_region_end = b{1};
    box_region = str2num(box_region_start):str2num(box_region_end);
    setappdata(0, 'box_region', box_region);
    m3_cmt = ['lineout of range ' box_region_start ':' box_region_end];
    setappdata(0, 'cmt_str', m3_cmt);
    m3 = msgbox(m3_cmt, 'Range of Lineout');
    pause(1);
    close(m3);
    
    lineouts();

% --------------------------------------------------------------------
function menuEnergyLimits_Callback(hObject, eventdata, handles)
%This function calculates energies with 0.02 contour of lineouts.
%saveLineouts must run before this.
eda_energy_limits;

% --------------------------------------------------------------------
function menuPlotEnergyWithSortedValue_Callback(hObject, eventdata, handles)
%Plots calcualted energy gain/loss with sorted parameter. saveLineouts,
%sort_selected_snapshot_by_var_edited, and eda_energy_limits must run before
%this in that order
plot_energy_with_sorted_value;

% --------------------------------------------------------------------
function menuCorrelate_Callback(hObject, eventdata, handles)
%this function allows you to create a correlation plot of any two
%parameters in dataset. You can sort by the x parameter chosen
source_dir=getappdata(0, 'source_dir');
server_str=getappdata(0, 'server_str');
expt_str=getappdata(0, 'expt_str');
date_str=getappdata(0, 'date_str');
dataset_str=getappdata(0, 'dataset_str');
num_stacks = getappdata(0,'num_stacks');
num_images = getappdata(0,'num_images');
camera = getappdata(0, 'camera');
dataset_str = getappdata(0, 'dataset_str');
linearize = getappdata(0, 'linearize');
data = getappdata(0, 'data');

%get parameter names for data set
scalar_struc=data.raw.scalars;
scalars = fieldnames(scalar_struc);
num_parameters = length(scalars);
%create empty cell array for converted parameters with more user friendly definitions
converted_parameters = cell(num_parameters+3,1);

%convert to user friendly defined parameters
for i = 1:num_parameters
        converted_parameters{i} = eda_extract_data_for_list(scalars{i});
end
%These are calculated in nvn_extract_data, they are not parameters in data
converted_parameters{num_parameters+1,1} = 'excess_charge_USBPM1_DSBPM1';
converted_parameters{num_parameters+2,1} = 'excess_charge_USBPM1_DSBPM2';
converted_parameters{num_parameters+3,1} = 'excess_charge_UStoro1_DStoro1';
% param_amount = questdlg('Are you plotting 
%prompt user to select x and y parameters
[s, ok] = listdlg('PromptString','Select x-axis parameter', 'SelectionMode', 'single', 'ListString',converted_parameters);
x_param = converted_parameters{s};

[a, ok] = listdlg('PromptString','Select y-axis parameter', 'SelectionMode', 'single', 'ListString',converted_parameters);
y_param = converted_parameters{a};

%get x and y values
[x_UID,x_values]=eda_extract_data(data,x_param,s);
[y_UID,y_values]=eda_extract_data(data,y_param,a);

%ask to sort x parameter. If selected, sorts x parameter and rearranges y
%parameter values following the sorted indexes
sort_q = questdlg('Would you like your x_parameter sorted?');

switch sort_q
    case 'Yes'
        %Make the sort vector from x parameter
        unique_sort_id=unique(x_UID);
        if length(unique_sort_id)~=length(x_UID)
            error('repetative UIDs exist in the sort dataset. Program terminated')        
        end
        [Y1,I1]=sort(x_values);        
        sorted_UID=x_UID(I1);
        
        %match the UIDs with the parameter values. This discards parameter
        %values that do not have an associated shot to create vectors of
        %same length
         j=1;
         [~, index_y_UID_matched, index_sorted_UID]=intersect(sorted_UID,y_UID(j,:), 'stable');

        matched_y_values(j,:)=y_values(j,index_sorted_UID);    
        revised_UID(j,:)=sorted_UID(index_y_UID_matched);
        sorted_x_values(j,:)=Y1(index_y_UID_matched);
        
        %creates plot
        c = figure('Name', ['Correlation Plot of ' x_param ' with ' y_param ' ' dataset_str]);
        set(c, 'color', [1,1,1]);
        plot(sorted_x_values, matched_y_values);
        plot_title = title([x_param ' vs. ' y_param]);
        plot_xlabel = xlabel(x_param);
        plot_ylabel = ylabel(y_param);
        set(plot_xlabel, 'Interpreter', 'none');
        set(plot_title, 'Interpreter', 'none');
        set(plot_ylabel, 'Interpreter', 'none');

    otherwise
        %creates non-sorted plot. The lengths of these parameters are
        %longer than the number of shots taken for the dataset
        c = figure('Name', ['Correlation Plot of ' x_param ' with ' y_param ' ' dataset_str]);
        set(c, 'color', [1,1,1]);
        scatter(x_values, y_values);
        plot_title = title([x_param ' vs. ' y_param]);
        plot_xlabel = xlabel(x_param);
        plot_ylabel = ylabel(y_param);
        set(plot_xlabel, 'Interpreter', 'none');
        set(plot_title, 'Interpreter', 'none');
        set(plot_ylabel, 'Interpreter', 'none');
end


